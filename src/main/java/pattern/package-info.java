package pattern;

/*
* 七大设计原则(原则描述):
* 主要的关注点在于识别稳定和变化,并分离
*
* 1.开放封闭原则:软件实体应该可以扩展,不可修改;对扩展开放,对修改封闭;
* 2.单一职责原则:就一个类而言,应该只有一个引起它变化的原因;
* 3.依赖倒置原则:高层模块不应该依赖于底层模块,都应该依赖于抽象;抽象不应该依赖于细节,细节依赖于抽象;
* 4.最小知识原则(迪米特法则):如果两个类不必彼此直接通信,那么这两个类就不应该发生直接的相互作用;
*                         如果其中一个类需要调用另一个类的某个方法的话,可以通过第三者转发这个调用;
* 5.接口隔离原则:客户端不应该依赖他不需要的接口,类间的依赖关系应该建立在最小的接口上;
* 6.合成/聚合复用原则:尽量使用合成聚合,尽量不要使用继承;
* 7.里式替换原则:子类型应该能够替换掉他们的父类型(isa);
*
* 23总常用的设计模式:
* 创建型:
*       单例
*       简单工厂
*       工厂方法
*       抽象工厂
*       建造者
*       原型
* 结构型:
*       装饰
*       桥接
*       组合
*       享元
*       代理
*       外观
* 行为1:
*       观察者(订阅通知)
*       模板方法
*       命令
*       状态
*       职责链
* 行为2:
*       解释器
*       中介者
*       访问者
*       策略
*       备忘录
*       迭代器
*
* 每种模式的示例代码/应对的场景/常见的应用/成熟的类库/java8下的形式
*
*
*
* */
